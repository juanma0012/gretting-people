{"version":3,"sources":["shared/utility.js","components/GreetingList/actions.js","components/GreetingList/actionTypes.js","components/PeopleForm/PeopleForm.js","components/PeopleForm/actions.js","components/PeopleForm/actionTypes.js","components/LanguageDropdown/LanguageDropdown.js","components/LanguageDropdown/actions.js","components/LanguageDropdown/actionTypes.js","components/GreetingList/GreetingItem.js","components/GreetingList/GreetingList.js","App.js","serviceWorker.js","components/PeopleForm/reducer.js","components/LanguageDropdown/reducer.js","components/GreetingList/reducer.js","reducer.js","index.js"],"names":["greetingByLanguage","english","person","concat","spanish","french","portuguese","italian","updateObject","oldObject","updatedProperties","Object","objectSpread","defaultLanguage","keys","shift","setGreetings","people","language","type","greetings","map","connect","dispatch","onSetPeople","peopleString","getState","split","filter","item","trim","languageReducer","greetingActions","_ref","react_default","a","createElement","className","value","onChange","e","target","onSetLanguage","peopleReducer","languagesList","i","key","word","charAt","toUpperCase","slice","select","GreetingItem","text","state","greetingsReducer","greetingAllPeople","greeting","GreetingList_GreetingItem","App","title","this","components_PeopleForm_PeopleForm","components_LanguageDropdown_LanguageDropdown","components_GreetingList_GreetingList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","resolveEach","defineProperty","action","initialState","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.05de6bd1.chunk.js","sourcesContent":["/**\n * It's  an object with the available languages and a default greeting by language\n */\nexport const greetingByLanguage = {\n    english: person => `Hello, nice to meet you ${person}, welcome!`,\n    spanish: person => `Hola, mucho gusto ${person}, bienvenido!`,\n    french: person => `Bonjour, ravi de vous rencontrer ${person}, bienvenue!`,\n    portuguese: person => `Olá, prazer em conhecê-lo ${person}, seja bem-vindo!`,\n    italian: person => `Ciao, piacere di conoscerti ${person}, benvenuto!`\n};\n\n/**\n * Method that returns a new object with the properties updated\n * @param {Object} oldObject, Contains all the  properties of the object\n * @param {Object} updatedProperties, Contains the properties to be replaced wit new values\n * @returns {Object}, New Object updated\n */\nexport const updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n};\n\n/**\n * Method that returns the default language\n * @returns {string}, default language\n */\nexport const defaultLanguage = Object.keys(greetingByLanguage).shift();\n\n/**\n * Method that returns a word in capital letter\n * @returns {string}, word in capittal letter\n */\nexport const toCapitalLetter = word => word.charAt(0).toUpperCase() + word.slice(1);\n","import { greetingByLanguage } from '../../shared/utility';\nimport * as actionTypes from './actionTypes';\n\nexport const setGreetings = (people, language) => {\n    let greetings = people.map(person => greetingByLanguage[language](person));\n    return { type: actionTypes.SET_GREETINGS, greetings };\n};\n","export const SET_GREETINGS = 'greetingList/SET_GREETINGS';\n","import { connect } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as actions from './actions';\nimport './peopleForm.css';\n\nexport const PeopleForm = ({ onSetPeople }) => {\n    let value;\n    const typingNames = e => {\n        onSetPeople(e.target.value);\n    }\n    return (\n        <div className=\"peopleForm\">\n            <textarea value={value} onChange={typingNames}></textarea>\n        </div>\n    )\n};\n\nPeopleForm.propTypes = {\n    onSetPeople: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSetPeople: (people) => dispatch(actions.setPeople(people))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(PeopleForm);\n","import * as actionTypes from './actionTypes';\nimport * as greetingActions from '../GreetingList/actions';\n\nexport const setPeople = (peopleString) => {\n    return (dispatch, getState) => {\n        let people = peopleString.split('\\n').filter(item => item.trim() !== '');\n        dispatch({ type: actionTypes.SET_PEOPLE, people });\n        let state = getState();\n        let language = state.languageReducer.language;\n        dispatch(greetingActions.setGreetings(people, language));\n    }\n};\n","export const SET_PEOPLE = 'peopleForm/SET_PEOPLE';\n","import { connect } from 'react-redux'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { greetingByLanguage, toCapitalLetter } from '../../shared/utility';\nimport * as actions from './actions'\nimport './languageDropdown.css';\n\nexport const LanguageDropdown = ({ onSetLanguage }) => {\n    let select;\n    let languages = Object.keys(greetingByLanguage);\n    const languagesList = languages.map((language, i) => (\n        <option value={language} key={i}>{toCapitalLetter(language)}</option>\n    ));\n    const onChangeLanguage = e => onSetLanguage(e.target.value);\n\n    return (\n        <div className=\"languageDropdown\">\n            <select value={select} onChange={onChangeLanguage}>\n                {languagesList}\n            </select>\n        </div>\n    )\n};\n\nLanguageDropdown.propTypes = {\n    onSetLanguage: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSetLanguage: (people) => dispatch(actions.setLanguage(people))\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(LanguageDropdown);\n","import * as actionTypes from './actionTypes';\nimport * as greetingActions from '../GreetingList/actions';\n\nexport const setLanguage = (language) => {\n    return (dispatch, getState) => {\n        dispatch({ type: actionTypes.SET_LANGUAGE, language });\n        let state = getState();\n        let people = state.peopleReducer.people;\n        dispatch(greetingActions.setGreetings(people, language));\n    }\n};\n","export const SET_LANGUAGE = 'languageDropdown/SET_LANGUAGE';\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst GreetingItem = ({ text }) => (\n    <li className=\"greetingItem\">{text}</li>\n)\n\nGreetingItem.propTypes = {\n    text: PropTypes.string.isRequired\n}\n\nexport default GreetingItem\n","import { connect } from 'react-redux';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport GreetingItem from './GreetingItem';\nimport './greetingList.css';\n\nexport const GreetingList = ({ greetings }) => {\n    const greetingAllPeople = greetings.map((greeting, i) => (\n        <GreetingItem key={i} text={greeting} />\n    ));\n    return (\n        <div className=\"greetingList\">\n            <ul>\n                {greetingAllPeople}\n            </ul>\n        </div>\n    )\n};\n\nGreetingList.propTypes = {\n    greetings: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    greetings: state.greetingsReducer.greetings\n});\n\nexport default connect(\n    mapStateToProps\n)(GreetingList);\n","import React, { Component } from 'react';\nimport { PeopleForm, GreetingList, LanguageDropdown } from './components';\nimport './app.css';\n\nclass App extends Component {\n    title = 'Greeting people';\n    render() {\n        return (\n            <div className=\"app\">\n                <h1>{this.title}</h1>\n                <br></br>\n                <PeopleForm />\n                <br></br>\n                <LanguageDropdown />\n                <br></br>\n                <GreetingList />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { resolveEach } from 'redux-resolver';\nimport { updateObject } from '../../shared/utility';\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    people: []\n};\n\nconst setPeople = (state, action) => {\n    return updateObject(state, {\n        people: action.people\n    });\n};\n\nexport default resolveEach(initialState, {\n    [actionTypes.SET_PEOPLE]: setPeople\n});\n","import { resolveEach } from 'redux-resolver';\nimport { updateObject, defaultLanguage } from '../../shared/utility';\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    language: defaultLanguage\n};\n\nconst setLanguage = (state, action) => {\n    return updateObject(state, {\n        language: action.language\n    });\n};\n\nexport default resolveEach(initialState, {\n    [actionTypes.SET_LANGUAGE]: setLanguage\n});\n","import { resolveEach } from 'redux-resolver'\nimport { updateObject } from '../../shared/utility';\nimport * as actionTypes from './actionTypes';\n\nconst initialState = {\n    greetings: []\n};\n\nconst setGreetings = (state, action) => {\n    return updateObject(state, {\n        greetings: action.greetings\n    });\n};\n\nexport default resolveEach(initialState, {\n    [actionTypes.SET_GREETINGS]: setGreetings\n});\n","import { combineReducers } from 'redux';\nimport peopleReducer from './components/PeopleForm/reducer';\nimport languageReducer from './components/LanguageDropdown/reducer';\nimport greetingsReducer from './components/GreetingList/reducer';\n\nexport default combineReducers({\n    peopleReducer,\n    languageReducer,\n    greetingsReducer\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducer'\n\nconst store = createStore(rootReducer,\n    applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}